plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    compileSdk 30

    defaultConfig {
        minSdk 21
        targetSdk 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

def versionName = "1.0.1-SNAPSHOT"

afterEvaluate {
    publishing {
        publications {
            Production(MavenPublication) {
                from components.release
                // 使用方引用 implementation 'cn.com.jack:mavendemo:2.7.0-SNAPSHOT'
                groupId = "cn.jiangker.lib"
                artifactId = "flexlist"
                version = versionName
                // 上传source，这样使用放可以看到方法注释
                artifact generateSourcesJar
            }
        }
        repositories {
            // 定义一个 maven 仓库
            maven {
                // 可以有且仅有一个仓库不指定 name 属性，会隐式设置为 Maven
                // 根据 versionName 来判断仓库地址
                url = versionName.endsWith('SNAPSHOT') ? SNAPSHOT_REPOSITORY_URL : RELEASE_REPOSITORY_URL
                // 仓库用户名密码
                credentials {
                    username = "admin"
                    password = "jfp-nexus"
                }
            }
            // 定义第二个 maven 仓库，名为 Nexus
//            maven {
//                // 必须显示指定 name
//                name = "nexus"
//                url = versionName.endsWith('SNAPSHOT') ? SNAPSHOT_REPOSITORY_URL : RELEASE_REPOSITORY_URL
//            }
        }
    }
}